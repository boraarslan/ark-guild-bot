//! SeaORM Entity. Generated by sea-orm-codegen 0.7.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "lobby_player")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub lobby_id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub guild_id: String,
    #[sea_orm(column_type = "Text")]
    pub player_id: String,
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub character_name: String,
    pub active: bool,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Characters,
    Lobby,
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Relation::Characters => Entity::belongs_to(super::characters::Entity)
                .from((Column::GuildId, Column::CharacterName))
                .to((
                    super::characters::Column::GuildId,
                    super::characters::Column::Name,
                ))
                .into(),
            Relation::Lobby => Entity::belongs_to(super::lobby::Entity)
                .from((Column::LobbyId, Column::GuildId))
                .to((super::lobby::Column::LobbyId, super::lobby::Column::GuildId))
                .into(),
        }
    }
}

impl Related<super::characters::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Characters.def()
    }
}

impl Related<super::lobby::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Lobby.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
