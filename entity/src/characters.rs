//! SeaORM Entity. Generated by sea-orm-codegen 0.6.0

use sea_orm::entity::prelude::*;
use std::fmt::{Debug, Display};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "characters")]
pub struct Model {
    pub id: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub name: String,
    pub class: Class,
    pub item_level: i32,
    pub last_updated: DateTimeUtc,
}

#[derive(Debug, Clone, Copy, PartialEq, EnumIter, DeriveActiveEnum, poise::ChoiceParameter)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "class")]
pub enum Class {
    #[sea_orm(string_value = "Berserker")]
    Berserker,
    #[sea_orm(string_value = "Paladin")]
    Paladin,
    #[sea_orm(string_value = "Gunlancer")]
    Gunlancer,
    #[sea_orm(string_value = "Striker")]
    Striker,
    #[sea_orm(string_value = "Wardancer")]
    Wardancer,
    #[sea_orm(string_value = "Scrapper")]
    Scrapper,
    #[sea_orm(string_value = "Soulfist")]
    Soulfist,
    #[sea_orm(string_value = "Gunslinger")]
    Gunslinger,
    #[sea_orm(string_value = "Artillerist")]
    Artillerist,
    #[sea_orm(string_value = "Deadeye")]
    Deadeye,
    #[sea_orm(string_value = "Sharpshooter")]
    Sharpshooter,
    #[sea_orm(string_value = "Bard")]
    Bard,
    #[sea_orm(string_value = "Sorceress")]
    Sorceress,
    #[sea_orm(string_value = "Shadowhunter")]
    Shadowhunter,
    #[sea_orm(string_value = "Deathblade")]
    Deathblade,
}

impl Display for Class {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Debug::fmt(&self, f)
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::guildmates::Entity",
        from = "Column::Id",
        to = "super::guildmates::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Guildmates,
}

impl Related<super::guildmates::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Guildmates.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
