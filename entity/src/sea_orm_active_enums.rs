//! SeaORM Entity. Generated by sea-orm-codegen 0.6.0

use std::fmt::{Debug, Display};

use sea_orm::entity::prelude::*;

#[derive(Debug, Copy, Clone, PartialEq, EnumIter, DeriveActiveEnum, poise::ChoiceParameter)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "class")]
pub enum Class {
    #[sea_orm(string_value = "Artillerist")]
    Artillerist,
    #[sea_orm(string_value = "Bard")]
    Bard,
    #[sea_orm(string_value = "Berserker")]
    Berserker,
    #[sea_orm(string_value = "Deadeye")]
    Deadeye,
    #[sea_orm(string_value = "Deathblade")]
    Deathblade,
    #[sea_orm(string_value = "Gunlancer")]
    Gunlancer,
    #[sea_orm(string_value = "Gunslinger")]
    Gunslinger,
    #[sea_orm(string_value = "Paladin")]
    Paladin,
    #[sea_orm(string_value = "Scrapper")]
    Scrapper,
    #[sea_orm(string_value = "Shadowhunter")]
    Shadowhunter,
    #[sea_orm(string_value = "Sharpshooter")]
    Sharpshooter,
    #[sea_orm(string_value = "Sorceress")]
    Sorceress,
    #[sea_orm(string_value = "Soulfist")]
    Soulfist,
    #[sea_orm(string_value = "Striker")]
    Striker,
    #[sea_orm(string_value = "Wardancer")]
    Wardancer,
}
#[derive(Debug, Copy, Clone, PartialEq, EnumIter, DeriveActiveEnum, poise::ChoiceParameter)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "role")]
pub enum Role {
    #[sea_orm(string_value = "Deputy")]
    Deputy,
    #[sea_orm(string_value = "Guild Master")]
    GuildMaster,
    #[sea_orm(string_value = "Guildmate")]
    Guildmate,
    #[sea_orm(string_value = "Officer")]
    Officer,
}
#[derive(Debug, Clone, Copy, PartialEq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "content")]
pub enum Content {
    // Guardian Raids
    // Level 1
    #[sea_orm(string_value = "Urnil")]
    Urnil,
    #[sea_orm(string_value = "Lumerus")]
    Lumerus,
    #[sea_orm(string_value = "IcyLegoros")]
    IcyLegoros,
    #[sea_orm(string_value = "Vertus")]
    Vertus,
    // Level 2
    #[sea_orm(string_value = "Chromanium")]
    Chromanium,
    #[sea_orm(string_value = "Nacrasena")]
    Nacrasena,
    #[sea_orm(string_value = "FlameFoxYoho")]
    FlameFoxYoho,
    #[sea_orm(string_value = "Tytalos")]
    Tytalos,
    // Level 3
    #[sea_orm(string_value = "DarkLegoros")]
    DarkLegoros,
    #[sea_orm(string_value = "Helgaia")]
    Helgaia,
    #[sea_orm(string_value = "Calventus")]
    Calventus,
    #[sea_orm(string_value = "Achates")]
    Achates,
    // Level 4
    #[sea_orm(string_value = "FrostHelgaia")]
    FrostHelgaia,
    #[sea_orm(string_value = "LavaChromanium")]
    LavaChromanium,
    #[sea_orm(string_value = "Levanos")]
    Levanos,
    #[sea_orm(string_value = "Alberhastic")]
    Alberhastic,
    // Level 5
    #[sea_orm(string_value = "ArmoredNacrasena")]
    ArmoredNacrasena,
    #[sea_orm(string_value = "Igrexion")]
    Igrexion,
    #[sea_orm(string_value = "NightFoxYoho")]
    NightFoxYoho,
    #[sea_orm(string_value = "Velganos")]
    Velganos,
    // Abyss Dungeons
    // Tier 1.1
    #[sea_orm(string_value = "DemonBeastCanyon")]
    DemonBeastCanyon,
    #[sea_orm(string_value = "NecromancersOrigin")]
    NecromancersOrigin,
    // Tier 1.2
    #[sea_orm(string_value = "HallOfTheTwistedWarlord")]
    HallOfTheTwistedWarlord,
    #[sea_orm(string_value = "HildebrandtPalace")]
    HildebrandtPalace,
    // Tier 2.1
    #[sea_orm(string_value = "RoadOfLament")]
    RoadOfLament,
    #[sea_orm(string_value = "ForgeOfFallenPride")]
    ForgeOfFallenPride,
    // Tier 2.2 (8-Man)
    #[sea_orm(string_value = "SeaOfIndolence")]
    SeaOfIndolence,
    #[sea_orm(string_value = "TranquilKarkosa")]
    TranquilKarkosa,
    #[sea_orm(string_value = "AlaricsSanctuary")]
    AlaricsSanctuary,
    // Tier 3.1
    #[sea_orm(string_value = "AirasOculus")]
    AirasOculus,
    #[sea_orm(string_value = "OrehaPreveza")]
    OrehaPreveza,
    // Abyss Raids
    #[sea_orm(string_value = "Argos1")]
    Argos1,
    #[sea_orm(string_value = "Argos2")]
    Argos2,
    #[sea_orm(string_value = "Argos3")]
    Argos3,
}

impl Content {
    fn is_8man(&self) -> bool {
        matches!(
            self,
            Self::SeaOfIndolence | Self::TranquilKarkosa | Self::AlaricsSanctuary
        )
    }
    
    fn is_guardian_raid(&self) -> bool {
        matches!(
            self,
            Self::Urnil |
            Self::Lumerus |
            Self::IcyLegoros |
            Self::Vertus |
            Self::Chromanium |
            Self::Nacrasena |
            Self::FlameFoxYoho |
            Self::Tytalos |
            Self::DarkLegoros |
            Self::Helgaia |
            Self::Calventus |
            Self::Achates |
            Self::FrostHelgaia |
            Self::LavaChromanium |
            Self::Levanos |
            Self::Alberhastic |
            Self::ArmoredNacrasena |
            Self::Igrexion |
            Self::NightFoxYoho |
            Self::Velganos 
        )
    }

    fn is_abyss_dungeon(&self) -> bool {
        matches!(
            self,
            Self::DemonBeastCanyon |
            Self::NecromancersOrigin |
            Self::HallOfTheTwistedWarlord |
            Self::HildebrandtPalace |
            Self::RoadOfLament |
            Self::ForgeOfFallenPride |
            Self::SeaOfIndolence |
            Self::TranquilKarkosa |
            Self::AlaricsSanctuary |
            Self::AirasOculus |
            Self::OrehaPreveza
        )
    }
}

impl Display for Class {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Debug::fmt(&self, f)
    }
}

impl Display for Role {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Debug::fmt(&self, f)
    }
}

impl Display for Content {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Debug::fmt(&self, f)
    }
}